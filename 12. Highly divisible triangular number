// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

function triangleNumber(xTriangleNum, xDivisors) {
	var triangleNum = xTriangleNum * (xTriangleNum + 1) / 2;
	while(findNumOfDivisors(triangleNum) < xDivisors) {
		xTriangleNum++;
		triangleNum = xTriangleNum * (xTriangleNum + 1) / 2;
	}
	return triangleNum;
}

// find the number of divisors of a given N
function findNumOfDivisors(N) {
	var numOfDivisors = 1, obj = {};
  var count = 2;
	while(N > 1) {
	  if(N % count === 0) {
	  	N /= count;
	  	if(!obj[count]) {
	  		obj[count] = 1;
	  	} else if (obj[count]) {
	  		obj[count]++;
	  	} 
	  } else {
	  	count++;
	  }
	}
	for(var key in obj) {
		numOfDivisors *= (obj[key] + 1);
	}
	return numOfDivisors;
}

triangleNumber(1, 500);
